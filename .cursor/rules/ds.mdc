---
description: creating components, ds and ui/ux layer of app
alwaysApply: false
---
# üî® FERRO'S DESIGN SYSTEM COMMANDMENTS
*≈ªelazne zasady dla zachowania czysto≈õci nowego DS*

## üö® ABSOLUTNIE ZAKAZANE
*Dotknij tego a dostaniesz po ≈Çapach*

### 1. PostCSS Configuration
```js
// ‚ùå NIGDY NIE R√ìB TEGO
// Nie usuwaj postcss-preset-mantine
// Nie zmieniaj autoRem: true
// Nie ruszaj Mantine breakpoint variables
```

### 2. Theme Colors - SACRED SLATE/INDIGO PALETTE
```typescript
// ‚úÖ TYLKO TE KOLORY W DARK THEME
colors: {
  dark: [
    '#e2e8f0', // text - soft white
    '#cbd5e1', // muted text
    '#94a3b8', // secondary text
    '#64748b', // borders
    '#475569', // dividers
    '#334155', // cards
    '#1e293b', // elevated surface
    '#1a202c', // main surface
    '#0f1419', // background
    '#0c1015'  // deepest
  ],
  primary: ['#4f46e5', '#6366f1', ...], // Professional indigo
}
```

### 3. Typography - NO CUSTOM FONTS
```typescript
// ‚ùå ZAKAZANE
fontFamily: 'Comic Sans MS', // Dostaniesz bana
fontFamily: 'Papyrus',       // Jeszcze wiƒôkszy ban

// ‚úÖ TYLKO MANTINE DEFAULTS
// Lub system fonts je≈õli MUSISZ
```

### 4. Z-Index System
```typescript
// ‚úÖ TYLKO MANTINE VARIABLES
zIndex: {
  app: 100,
  modal: 200,
  popover: 300,
  overlay: 400,
  max: 9999
}
// ‚ùå ≈ªADNYCH RANDOM z-index: 99999999
```

## üîß CORE RULES

### Rule #1: Mantine First
```typescript
// ‚úÖ ZAWSZE NAJPIERW MANTINE
import { Button } from '@mantine/core';

// ‚ùå CUSTOM COMPONENTS TYLKO GDY MANTINE NIE WYSTARCZY
// I to znaczy NAPRAWDƒò nie wystarczy
```

### Rule #2: CSS Variables > Inline Styles
```typescript
// ‚úÖ GOOD
<Box style={{ backgroundColor: 'var(--mantine-color-dark-7)' }}>

// ‚ùå EVIL
<Box style={{ backgroundColor: '#1a202c' }}>
```

### Rule #3: Extended Theme Types
```typescript
// ‚úÖ KORZYSTAJ Z ROZSZERZONYCH TYP√ìW
spacing: 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'
radius: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'round'

// ‚ùå ≈ªADNYCH CUSTOM STRING√ìW
spacing: 'super-mega-large' // To nie jest Pokemon
```

### Rule #4: Theme Consistency
```typescript
// ‚úÖ U≈ªYWAJ THEME PROPERTIES
const theme = useMantineTheme();
backgroundColor: theme.colors.dark[7]

// ‚ùå HARDCODED VALUES
backgroundColor: '#1a202c' // Co je≈õli zmienimy palette?
```

## üé® COMPONENT CREATION RULES

### Rule #5: Extend, Don't Replace
```typescript
// ‚úÖ EXTEND MANTINE COMPONENTS
interface CustomButtonProps extends ButtonProps {
  customProp?: string;
}

// ‚ùå CA≈ÅKOWICIE CUSTOM COMPONENTS
const MyButton = styled.button`` // To nie styled-components era
```

### Rule #6: Props Interface Pattern
```typescript
// ‚úÖ PROPER INTERFACE INHERITANCE
interface StatsCardProps extends PaperProps {
  title: string;
  value: number;
  // Mantine props sƒÖ automatycznie dostƒôpne
}
```

### Rule #7: Responsive Design
```typescript
// ‚úÖ MANTINE BREAKPOINTS
const { xs, sm, md, lg, xl } = theme.breakpoints;

// ‚ùå CUSTOM BREAKPOINTS
const mobileBreakpoint = '768px'; // Dlaczego reinvent the wheel?
```

## üöÄ PERFORMANCE COMMANDMENTS

### Rule #8: Lazy Loading
```typescript
// ‚úÖ LAZY LOAD HEAVY COMPONENTS
const VirtualizedList = lazy(() => import('./VirtualizedList'));

// ‚ùå IMPORT EVERYTHING UPFRONT
// Jak lubisz bundle o rozmiarze s≈Çonia?
```

### Rule #9: Memo Strategically
```typescript
// ‚úÖ MEMO EXPENSIVE COMPONENTS
const StatsCard = memo(({ title, value }) => {
  // Heavy calculations here
});

// ‚ùå MEMO EVERYTHING
// Nie ka≈ºdy div potrzebuje memo
```

### Rule #10: Bundle Size Monitoring
```bash
# ‚úÖ REGULAR BUNDLE ANALYSIS
yarn build && yarn analyze

# ‚ùå IGNORE BUNDLE SIZE
# "To bƒôdzie szybkie" - famous last words
```

## üîí ARCHITECTURAL BOUNDARIES

### Rule #11: Store Separation
```typescript
// ‚úÖ DOMAIN-SPECIFIC STORES
usePatientStore() // Patients only
useAppointmentStore() // Appointments only

// ‚ùå GOD STORE
useEverythingStore() // Recipe for disaster
```

### Rule #12: Service Layer
```typescript
// ‚úÖ BUSINESS LOGIC IN SERVICES
patientDataService.createPatient()

// ‚ùå BUSINESS LOGIC IN COMPONENTS
const handleSubmit = () => {
  // 200 lines of business logic
  // This is not React's job
}
```

## üéØ TESTING COMMANDMENTS

### Rule #13: Test What Matters
```typescript
// ‚úÖ USER INTERACTIONS
expect(button).toHaveTextContent('Save Patient');

// ‚ùå IMPLEMENTATION DETAILS
expect(component.state.internalCounter).toBe(5);
// Users don't care about internal state
```

### Rule #14: Accessibility First
```typescript
// ‚úÖ SEMANTIC HTML + ARIA
<Button aria-label="Delete patient record">
  <IconTrash />
</Button>

// ‚ùå CLICK HANDLERS ON DIVS
<div onClick={handleDelete}>Delete</div> // Screen readers cry
```

## üî• EMERGENCY PROTOCOLS

### When Something Breaks:
1. **DON'T PANIC** - Mantine 8 is stable
2. **CHECK MANTINE DOCS** - 90% problem√≥w to RTFM
3. **VERIFY POSTCSS** - Config issues are common
4. **THEME TYPES** - TypeScript errors usually theme-related

### When Adding New Features:
1. **MANTINE FIRST** - Check if component exists
2. **EXTEND, DON'T REPLACE** - Build on Mantine foundation
3. **TEST DARK MODE** - Both color schemes must work
4. **MOBILE FIRST** - Responsive by default

## üíÄ HALL OF SHAME
*Rzeczy kt√≥re NIE WOLNO robiƒá*

```typescript
// ‚ùå FORBIDDEN PATTERNS
!important                    // CSS nuclear option
z-index: 99999               // Z-index war crimes
position: fixed              // Without proper z-index
margin: -10px                // Negative margins = code smell
width: 100vw                 // Viewport units without consideration
transform: translateX(-50%)  // Centering hacks
```

## üèÜ GOLD STANDARD
*Jak powinien wyglƒÖdaƒá dobry kod*

```typescript
// ‚úÖ FERRO APPROVED
const PatientCard = memo(({ patient, ...props }: PatientCardProps) => {
  const theme = useMantineTheme();
  
  return (
    <Paper 
      {...props}
      p="md" 
      radius="md"
      withBorder
      style={{ 
        backgroundColor: theme.colors.dark[7],
        borderColor: theme.colors.dark[4]
      }}
    >
      <Group justify="space-between">
        <Stack spacing="xs">
          <Title order={3} c="dark.0">
            {patient.name}
          </Title>
          <Text size="sm" c="dark.2">
            {patient.email}
          </Text>
        </Stack>
        <ActionIcon 
          variant="subtle"
          color="gray"
          aria-label="Edit patient"
        >
          <IconEdit size={16} />
        </ActionIcon>
      </Group>
    </Paper>
  );
});
```

---

**Remember**: Ten design system to nie tylko CSS - to architektura, performance, accessibility i developer experience w jednym. Trzymaj siƒô tych zasad a bƒôdziesz mia≈Ç system godny szacunku.

*"Dobry kod to nie przypadek - to efekt dyscypliny"* - Ferro # üî® FERRO'S DESIGN SYSTEM COMMANDMENTS
*≈ªelazne zasady dla zachowania czysto≈õci nowego DS*

## üö® ABSOLUTNIE ZAKAZANE
*Dotknij tego a dostaniesz po ≈Çapach*

### 1. PostCSS Configuration
```js
// ‚ùå NIGDY NIE R√ìB TEGO
// Nie usuwaj postcss-preset-mantine
// Nie zmieniaj autoRem: true
// Nie ruszaj Mantine breakpoint variables
```

### 2. Theme Colors - SACRED SLATE/INDIGO PALETTE
```typescript
// ‚úÖ TYLKO TE KOLORY W DARK THEME
colors: {
  dark: [
    '#e2e8f0', // text - soft white
    '#cbd5e1', // muted text
    '#94a3b8', // secondary text
    '#64748b', // borders
    '#475569', // dividers
    '#334155', // cards
    '#1e293b', // elevated surface
    '#1a202c', // main surface
    '#0f1419', // background
    '#0c1015'  // deepest
  ],
  primary: ['#4f46e5', '#6366f1', ...], // Professional indigo
}
```

### 3. Typography - NO CUSTOM FONTS
```typescript
// ‚ùå ZAKAZANE
fontFamily: 'Comic Sans MS', // Dostaniesz bana
fontFamily: 'Papyrus',       // Jeszcze wiƒôkszy ban

// ‚úÖ TYLKO MANTINE DEFAULTS
// Lub system fonts je≈õli MUSISZ
```

### 4. Z-Index System
```typescript
// ‚úÖ TYLKO MANTINE VARIABLES
zIndex: {
  app: 100,
  modal: 200,
  popover: 300,
  overlay: 400,
  max: 9999
}
// ‚ùå ≈ªADNYCH RANDOM z-index: 99999999
```

## üîß CORE RULES

### Rule #1: Mantine First
```typescript
// ‚úÖ ZAWSZE NAJPIERW MANTINE
import { Button } from '@mantine/core';

// ‚ùå CUSTOM COMPONENTS TYLKO GDY MANTINE NIE WYSTARCZY
// I to znaczy NAPRAWDƒò nie wystarczy
```

### Rule #2: CSS Variables > Inline Styles
```typescript
// ‚úÖ GOOD
<Box style={{ backgroundColor: 'var(--mantine-color-dark-7)' }}>

// ‚ùå EVIL
<Box style={{ backgroundColor: '#1a202c' }}>
```

### Rule #3: Extended Theme Types
```typescript
// ‚úÖ KORZYSTAJ Z ROZSZERZONYCH TYP√ìW
spacing: 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'
radius: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'round'

// ‚ùå ≈ªADNYCH CUSTOM STRING√ìW
spacing: 'super-mega-large' // To nie jest Pokemon
```

### Rule #4: Theme Consistency
```typescript
// ‚úÖ U≈ªYWAJ THEME PROPERTIES
const theme = useMantineTheme();
backgroundColor: theme.colors.dark[7]

// ‚ùå HARDCODED VALUES
backgroundColor: '#1a202c' // Co je≈õli zmienimy palette?
```

## üé® COMPONENT CREATION RULES

### Rule #5: Extend, Don't Replace
```typescript
// ‚úÖ EXTEND MANTINE COMPONENTS
interface CustomButtonProps extends ButtonProps {
  customProp?: string;
}

// ‚ùå CA≈ÅKOWICIE CUSTOM COMPONENTS
const MyButton = styled.button`` // To nie styled-components era
```

### Rule #6: Props Interface Pattern
```typescript
// ‚úÖ PROPER INTERFACE INHERITANCE
interface StatsCardProps extends PaperProps {
  title: string;
  value: number;
  // Mantine props sƒÖ automatycznie dostƒôpne
}
```

### Rule #7: Responsive Design
```typescript
// ‚úÖ MANTINE BREAKPOINTS
const { xs, sm, md, lg, xl } = theme.breakpoints;

// ‚ùå CUSTOM BREAKPOINTS
const mobileBreakpoint = '768px'; // Dlaczego reinvent the wheel?
```

## üöÄ PERFORMANCE COMMANDMENTS

### Rule #8: Lazy Loading
```typescript
// ‚úÖ LAZY LOAD HEAVY COMPONENTS
const VirtualizedList = lazy(() => import('./VirtualizedList'));

// ‚ùå IMPORT EVERYTHING UPFRONT
// Jak lubisz bundle o rozmiarze s≈Çonia?
```

### Rule #9: Memo Strategically
```typescript
// ‚úÖ MEMO EXPENSIVE COMPONENTS
const StatsCard = memo(({ title, value }) => {
  // Heavy calculations here
});

// ‚ùå MEMO EVERYTHING
// Nie ka≈ºdy div potrzebuje memo
```

### Rule #10: Bundle Size Monitoring
```bash
# ‚úÖ REGULAR BUNDLE ANALYSIS
yarn build && yarn analyze

# ‚ùå IGNORE BUNDLE SIZE
# "To bƒôdzie szybkie" - famous last words
```

## üîí ARCHITECTURAL BOUNDARIES

### Rule #11: Store Separation
```typescript
// ‚úÖ DOMAIN-SPECIFIC STORES
usePatientStore() // Patients only
useAppointmentStore() // Appointments only

// ‚ùå GOD STORE
useEverythingStore() // Recipe for disaster
```

### Rule #12: Service Layer
```typescript
// ‚úÖ BUSINESS LOGIC IN SERVICES
patientDataService.createPatient()

// ‚ùå BUSINESS LOGIC IN COMPONENTS
const handleSubmit = () => {
  // 200 lines of business logic
  // This is not React's job
}
```

## üéØ TESTING COMMANDMENTS

### Rule #13: Test What Matters
```typescript
// ‚úÖ USER INTERACTIONS
expect(button).toHaveTextContent('Save Patient');

// ‚ùå IMPLEMENTATION DETAILS
expect(component.state.internalCounter).toBe(5);
// Users don't care about internal state
```

### Rule #14: Accessibility First
```typescript
// ‚úÖ SEMANTIC HTML + ARIA
<Button aria-label="Delete patient record">
  <IconTrash />
</Button>

// ‚ùå CLICK HANDLERS ON DIVS
<div onClick={handleDelete}>Delete</div> // Screen readers cry
```

## üî• EMERGENCY PROTOCOLS

### When Something Breaks:
1. **DON'T PANIC** - Mantine 8 is stable
2. **CHECK MANTINE DOCS** - 90% problem√≥w to RTFM
3. **VERIFY POSTCSS** - Config issues are common
4. **THEME TYPES** - TypeScript errors usually theme-related

### When Adding New Features:
1. **MANTINE FIRST** - Check if component exists
2. **EXTEND, DON'T REPLACE** - Build on Mantine foundation
3. **TEST DARK MODE** - Both color schemes must work
4. **MOBILE FIRST** - Responsive by default

## üíÄ HALL OF SHAME
*Rzeczy kt√≥re NIE WOLNO robiƒá*

```typescript
// ‚ùå FORBIDDEN PATTERNS
!important                    // CSS nuclear option
z-index: 99999               // Z-index war crimes
position: fixed              // Without proper z-index
margin: -10px                // Negative margins = code smell
width: 100vw                 // Viewport units without consideration
transform: translateX(-50%)  // Centering hacks
```

## üèÜ GOLD STANDARD
*Jak powinien wyglƒÖdaƒá dobry kod*

```typescript
// ‚úÖ FERRO APPROVED
const PatientCard = memo(({ patient, ...props }: PatientCardProps) => {
  const theme = useMantineTheme();
  
  return (
    <Paper 
      {...props}
      p="md" 
      radius="md"
      withBorder
      style={{ 
        backgroundColor: theme.colors.dark[7],
        borderColor: theme.colors.dark[4]
      }}
    >
      <Group justify="space-between">
        <Stack spacing="xs">
          <Title order={3} c="dark.0">
            {patient.name}
          </Title>
          <Text size="sm" c="dark.2">
            {patient.email}
          </Text>
        </Stack>
        <ActionIcon 
          variant="subtle"
          color="gray"
          aria-label="Edit patient"
        >
          <IconEdit size={16} />
        </ActionIcon>
      </Group>
    </Paper>
  );
});
```

---

**Remember**: Ten design system to nie tylko CSS - to architektura, performance, accessibility i developer experience w jednym. Trzymaj siƒô tych zasad a bƒôdziesz mia≈Ç system godny szacunku.

*"Dobry kod to nie przypadek - to efekt dyscypliny"* - Ferro 